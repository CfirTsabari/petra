use petra_backend_core::format;
use petra_backend_core::Name;
use petra_backend_core::SimpleLanguageBackend;
use std::io::Write;
#[derive(
    SimpleLanguageBackend,
    format::PetraFormatFooter,
    format::PetraFormatHeader,
    format::PetraFormatAutoGeneratedComment,
)]
pub struct PetraPythonBackend {}

impl PetraPythonBackend {
    #[must_use]
    pub const fn new() -> Self {
        Self {}
    }
}
impl Default for PetraPythonBackend {
    fn default() -> Self {
        Self::new()
    }
}

impl format::PetraFormatI64 for PetraPythonBackend {
    fn format<T: Write>(&mut self, name: &Name, data: i64, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_upper_snake();
        writeln!(writer, "{name} = {data}")
    }
}
impl format::PetraFormatString for PetraPythonBackend {
    fn format<T: Write>(&mut self, name: &Name, data: &str, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_upper_snake();
        writeln!(writer, "{name} = \"{data}\"")
    }
}
impl format::PetraFormatLineComment for PetraPythonBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        writeln!(writer, "# {comment}")
    }
}
impl format::PetraFormatMultiLineComment for PetraPythonBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        for line in comment.lines() {
            if line.trim().is_empty() {
                writeln!(writer, "#")?;
            } else {
                writeln!(writer, "# {line}")?;
            }
        }
        Ok(())
    }
}
