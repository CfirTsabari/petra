use proc_macro::TokenStream;
use quote::quote;
use syn::{parse_macro_input, DeriveInput};

#[proc_macro_derive(SimpleLanguageBackend)]
pub fn simple_language_backend(input: TokenStream) -> TokenStream {
    let DeriveInput { ident, .. } = parse_macro_input!(input);
    quote! {
        impl SimpleLanguageBackend for #ident {}
    }
    .into()
}
#[proc_macro_derive(PetraFormatHeader)]
pub fn petra_format_header(input: TokenStream) -> TokenStream {
    let DeriveInput { ident, .. } = parse_macro_input!(input);
    quote! {
        impl format::PetraFormatHeader for #ident {
            fn format(&self) -> Option<Vec<u8>> {
                None
            }
        }
    }
    .into()
}
#[proc_macro_derive(PetraFormatFooter)]
pub fn petra_format_footer(input: TokenStream) -> TokenStream {
    let DeriveInput { ident, .. } = parse_macro_input!(input);
    let output: quote::__private::TokenStream = quote! {
        impl format::PetraFormatFooter for #ident {
            fn format(&self) -> Option<Vec<u8>> {
                None
            }
        }
    };
    output.into()
}
#[proc_macro_derive(PetraFormatAutoGeneratedComment)]
pub fn petra_format_auto_generated_comment(input: TokenStream) -> TokenStream {
    let DeriveInput { ident, .. } = parse_macro_input!(input);
    quote! {
        impl format::PetraFormatAutoGeneratedComment for #ident {
            fn format(&self) -> Option<Vec<u8>> {
                None
            }
        }
    }
    .into()
}
