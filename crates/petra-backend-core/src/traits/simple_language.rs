use super::format::{
    PetraFormatAutoGeneratedComment, PetraFormatFooter, PetraFormatHeader, PetraFormatI64,
    PetraFormatLineComment, PetraFormatMultiLineComment, PetraFormatString,
};
use super::helper::WriteHeader;
use crate::Result;
use crate::{Backend, BackendConfiguration};
use petra_core::{Document, TopItem, VarDeclaration, VarValue};
use std::io::Write;

// Personal choice
#[allow(clippy::module_name_repetitions)]
pub trait SimpleLanguageBackend:
    PetraFormatI64
    + PetraFormatLineComment
    + PetraFormatString
    + PetraFormatMultiLineComment
    + PetraFormatHeader
    + PetraFormatFooter
    + PetraFormatAutoGeneratedComment
{
}

impl<T, B> Backend<T> for B
where
    T: Write,
    B: SimpleLanguageBackend,
{
    fn format(
        &mut self,
        config: &BackendConfiguration,
        document: &Document,
        writer: &mut T,
    ) -> Result<()> {
        self.write_header(writer, config.create_auto_generated_comment())?;
        for item in &document.items {
            match item {
                TopItem::Comment(comment) => {
                    PetraFormatLineComment::format(self, comment, writer)?;
                }
                TopItem::MultiLineComment(comment) => {
                    PetraFormatMultiLineComment::format(self, comment, writer)?;
                }
                TopItem::VarDeclaration(VarDeclaration {
                    name,
                    value: VarValue::Integer64(value),
                }) => PetraFormatI64::format(self, name, *value, writer)?,
                TopItem::VarDeclaration(VarDeclaration {
                    name,
                    value: VarValue::String(value),
                }) => PetraFormatString::format(self, name, value, writer)?,
            }
        }
        PetraFormatFooter::format(self, writer)?;
        Ok(())
    }
}
