use petra_backend_core::{format, MultiCommentFormatter, Name, SimpleLanguageBackend};
use std::io::Write;

#[derive(
    SimpleLanguageBackend,
    format::PetraFormatFooter,
    format::PetraFormatAutoGeneratedComment,
    format::PetraFormatHeader,
)]
pub struct PetraJsBackend {
    comment_writer: MultiCommentFormatter,
}

impl PetraJsBackend {
    #[must_use]
    pub const fn new() -> Self {
        Self {
            comment_writer: MultiCommentFormatter::new(true),
        }
    }
}

impl format::PetraFormatI64 for PetraJsBackend {
    fn format<T: Write>(&mut self, name: &Name, data: i64, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_upper_snake();
        writeln!(writer, "module.exports.{name} = {data};")
    }
}
impl format::PetraFormatString for PetraJsBackend {
    fn format<T: Write>(&mut self, name: &Name, data: &str, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_upper_snake();
        writeln!(writer, "module.exports.{name} = \"{data}\";")
    }
}
impl format::PetraFormatLineComment for PetraJsBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        writeln!(writer, "// {comment}")
    }
}
impl format::PetraFormatMultiLineComment for PetraJsBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        self.comment_writer.format(comment, "", writer)
    }
}
