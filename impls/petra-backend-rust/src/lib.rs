use petra_backend_core::format;
use petra_backend_core::Name;
use petra_backend_core::SimpleLanguageBackend;
use std::io::Write;

#[derive(
    SimpleLanguageBackend,
    format::PetraFormatFooter,
    format::PetraFormatHeader,
    format::PetraFormatAutoGeneratedComment,
)]
pub struct PetraRustBackend {}

impl PetraRustBackend {
    #[must_use]
    pub const fn new() -> Self {
        Self {}
    }
}
impl Default for PetraRustBackend {
    fn default() -> Self {
        Self::new()
    }
}
impl format::PetraFormatI64 for PetraRustBackend {
    fn format<T: Write>(&mut self, name: &Name, data: i64, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_upper_snake();
        writeln!(writer, "pub const {name}: i64 = {data};")
    }
}
impl format::PetraFormatString for PetraRustBackend {
    fn format<T: Write>(&mut self, name: &Name, data: &str, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_upper_snake();
        writeln!(writer, "pub const {name}: &str = \"{data}\";")
    }
}
impl format::PetraFormatLineComment for PetraRustBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        writeln!(writer, "// {comment}")
    }
}
impl format::PetraFormatMultiLineComment for PetraRustBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        writeln!(writer, "/*{comment}*/")
    }
}
