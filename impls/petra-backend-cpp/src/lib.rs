mod configuration;
use petra_backend_core::{format, MultiCommentFormatter, Name, SimpleLanguageBackend};
use std::io::Write;

pub use configuration::PetraCppConfiguration;

#[derive(SimpleLanguageBackend, format::PetraFormatAutoGeneratedComment)]
pub struct PetraCppBackend {
    config: PetraCppConfiguration,
    comment_writer: MultiCommentFormatter,
}

impl PetraCppBackend {
    #[must_use]
    pub const fn new(config: PetraCppConfiguration) -> Self {
        Self {
            config,
            comment_writer: MultiCommentFormatter::new(false),
        }
    }
}

impl format::PetraFormatHeader for PetraCppBackend {
    fn format<T: Write>(&mut self, writer: &mut T) -> std::io::Result<()> {
        writeln!(writer, "#pragma once\n")?;
        writeln!(writer, "namespace {} {{", self.config.get_namespace_name())
    }
}
impl format::PetraFormatFooter for PetraCppBackend {
    fn format<T: Write>(&mut self, writer: &mut T) -> std::io::Result<()> {
        writeln!(
            writer,
            "}}  // namespace {}",
            self.config.get_namespace_name()
        )
    }
}

impl format::PetraFormatI64 for PetraCppBackend {
    fn format<T: Write>(&mut self, name: &Name, data: i64, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_lower_snake();
        writeln!(writer, "static const long {name} = {data};")
    }
}
impl format::PetraFormatString for PetraCppBackend {
    fn format<T: Write>(&mut self, name: &Name, data: &str, writer: &mut T) -> std::io::Result<()> {
        let name = name.to_lower_snake();
        writeln!(writer, "static const std::string {name} = \"{data}\";")
    }
}
impl format::PetraFormatLineComment for PetraCppBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        writeln!(writer, "// {comment}")
    }
}
impl format::PetraFormatMultiLineComment for PetraCppBackend {
    fn format<T: Write>(&mut self, comment: &str, writer: &mut T) -> std::io::Result<()> {
        self.comment_writer.format(comment, "", writer)
    }
}
